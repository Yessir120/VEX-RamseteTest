#include "main.h"

std::vector<std::vector<double>> path = {
        {0.0001,0,0,0,0},
        {0.0004,0,0,0.0326,0},
        {0.0011,0,0,0.0773,0},
        {0.0024,0,0,0.1261,0},
        {0.0041,0,0,0.1762,0},
        {0.0064,0,0,0.2254,0},
        {0.0092,0,0,0.2756,0},
        {0.0124,0,0,0.3257,0},
        {0.0161,0,0,0.3754,0},
        {0.0204,0,0,0.4252,0},
        {0.0252,0,0,0.4753,0},
        {0.0304,0,0,0.5255,0},
        {0.0361,0,0,0.5753,0},
        {0.0424,0,0,0.6251,0},
        {0.0492,0,0,0.6752,0},
        {0.0564,0,0,0.7252,0},
        {0.0642,0,0,0.7752,0},
        {0.0724,0,0,0.8252,0},
        {0.0811,0,0,0.8751,0},
        {0.0904,0,0,0.9252,0},
        {0.1001,0,0,0.9752,0},
        {0.1104,0,0,1.0251,0},
        {0.1212,0,0,1.0752,0},
        {0.1324,0,0,1.1251,0},
        {0.1441,0,0,1.1751,0},
        {0.1564,0,0,1.2251,0},
        {0.1692,0,0,1.2751,0},
        {0.1824,0,0,1.3251,0},
        {0.1962,0,0,1.3751,0},
        {0.2104,0,0,1.4251,0},
        {0.2251,0,0,1.4751,0},
        {0.2404,0,0,1.5251,0},
        {0.2561,0,0,1.5751,0},
        {0.2724,0,0,1.6251,0},
        {0.2892,0,0,1.6751,0},
        {0.3064,0,0,1.7251,0},
        {0.3241,0,0,1.7751,0},
        {0.3424,0,0,1.825,0},
        {0.3611,0,0,1.875,0},
        {0.3804,0,0,1.925,0},
        {0.4001,0,0,1.975,0},
        {0.4204,0,0,2.0251,0},
        {0.4411,0,0,2.0751,0},
        {0.4624,0,0,2.125,0},
        {0.4841,0,0,2.175,0},
        {0.5064,0,0,2.2251,0},
        {0.5292,0,0,2.2751,0},
        {0.5524,0,0,2.3251,0},
        {0.5762,0,0,2.3751,0},
        {0.6004,0,0,2.425,0},
        {0.6252,0,0,2.4751,0},
        {0.6504,0,0,2.5251,0},
        {0.6762,0,0,2.5751,0},
        {0.7024,0,0,2.6251,0},
        {0.7291,0,0,2.6751,0},
        {0.7564,0,0,2.725,0},
        {0.7841,0,0,2.775,0},
        {0.8124,0,0,2.8251,0},
        {0.8411,0,0,2.875,0},
        {0.8704,0,0,2.925,0},
        {0.9001,0,0,2.975,0},
        {0.9304,0,0,3.025,0},
        {0.9611,0,0,3.075,0},
        {0.9924,0,0,3.125,0},
        {1.0241,0,0,3.175,0},
        {1.0564,0,0,3.2251,0},
        {1.0891,0,0,3.2751,0},
        {1.1224,0,0,3.325,0},
        {1.1561,0,0,3.375,0},
        {1.1904,0,0,3.425,0},
        {1.2251,0,0,3.475,0},
        {1.2604,0,0,3.525,0},
        {1.2962,0,0,3.5751,0},
        {1.3324,0,0,3.6251,0},
        {1.3692,0,0,3.675,0},
        {1.4064,0,0,3.725,0},
        {1.4441,0,0,3.775,0},
        {1.4824,0,0,3.8251,0},
        {1.5212,0,0,3.8751,0},
        {1.5604,0,0,3.9251,0},
        {1.6001,0,0,3.9751,0},
        {1.6404,0,0,4.025,0},
        {1.6812,0,0,4.075,0},
        {1.7224,0,0,4.1251,0},
        {1.7641,0,0,4.1751,0},
        {1.8064,0,0,4.2251,0},
        {1.8492,0,0,4.2751,0},
        {1.8924,0,0,4.3251,0},
        {1.9362,0,0,4.3751,0},
        {1.9804,0,0,4.4251,0},
        {2.0252,0,0,4.4751,0},
        {2.0701,0,0,4.5,0},
        {2.1151,0,0,4.5,0},
        {2.1601,0,0,4.5,0},
        {2.2051,0,0,4.5,0},
        {2.2502,0,0,4.5,0},
        {2.2952,0,0,4.5,0},
        {2.3402,0,0,4.5,0},
        {2.3851,0,0,4.5,0},
        {2.4302,0,0,4.5,0},
        {2.4751,0,0,4.5,0},
        {2.5201,0,0,4.5,0},
        {2.5651,0,0,4.5,0},
        {2.6102,0,0,4.5,0},
        {2.6551,0,0,4.5,0},
        {2.7002,0,0,4.5,0},
        {2.7451,0,0,4.5,0},
        {2.7902,0,0,4.5,0},
        {2.8351,0,0,4.5,0},
        {2.8801,0,0,4.5,0},
        {2.9252,0,0,4.5,0},
        {2.9701,0,0,4.5,0},
        {3.0151,0,0,4.5001,0},
        {3.0601,0,0,4.5001,0},
        {3.1051,0,0,4.5001,0},
        {3.1502,0,0,4.5001,0},
        {3.1952,0,0,4.5001,0},
        {3.2401,0,0,4.5001,0},
        {3.2851,0,0,4.5001,0},
        {3.3302,0,0,4.5001,0},
        {3.3752,0,0,4.5001,0},
        {3.4202,0,0,4.5001,0},
        {3.4652,0,0,4.5001,0},
        {3.5101,0,0,4.5001,0},
        {3.5552,0,0,4.5001,0},
        {3.6002,0,0,4.5001,0},
        {3.6452,0,0,4.5001,0},
        {3.6902,0,0,4.5001,0},
        {3.7352,0,0,4.5001,0},
        {3.7802,0,0,4.5001,0},
        {3.8252,0,0,4.5001,0},
        {3.8702,0,0,4.5001,0},
        {3.9151,0,0,4.5001,0},
        {3.9601,0,0,4.5001,0},
        {4.0052,0,0,4.5001,0},
        {4.0501,0,0,4.5001,0},
        {4.0951,0,0,4.5001,0},
        {4.1402,0,0,4.5001,0},
        {4.1851,0,0,4.5001,0},
        {4.2301,0,0,4.5001,0},
        {4.2752,0,0,4.5001,0},
        {4.3202,0,0,4.5001,0},
        {4.3652,0,0,4.5001,0},
        {4.4102,0,0,4.5001,0},
        {4.4551,0,0,4.5001,0},
        {4.5002,0,0,4.5001,0},
        {4.5452,0,0,4.5001,0},
        {4.5901,0,0,4.5001,0},
        {4.6352,0,0,4.5001,0},
        {4.6802,0,0,4.5001,0},
        {4.7252,0,0,4.5001,0},
        {4.7701,0,0,4.5001,0},
        {4.8152,0,0,4.5001,0},
        {4.8601,0,0,4.5001,0},
        {4.9051,0,0,4.5001,0},
        {4.9502,0,0,4.5001,0},
        {4.9952,0,0,4.5001,0},
        {5.0402,0,0,4.5001,0},
        {5.0852,0,0,4.5001,0},
        {5.1301,0,0,4.5001,0},
        {5.1752,0,0,4.5001,0},
        {5.2202,0,0,4.5001,0},
        {5.2652,0,0,4.5001,0},
        {5.3102,0,0,4.5001,0},
        {5.3552,0,0,4.5001,0},
        {5.4001,0,0,4.5001,0},
        {5.4451,0,0,4.5001,0},
        {5.4901,0,0,4.5001,0},
        {5.5352,0,0,4.5001,0},
        {5.5801,0,0,4.5001,0},
        {5.6252,0,0,4.5001,0},
        {5.6702,0,0,4.5001,0},
        {5.7152,0,0,4.5001,0},
        {5.7602,0,0,4.5001,0},
        {5.8052,0,0,4.5001,0},
        {5.8502,0,0,4.5001,0},
        {5.8951,0,0,4.5001,0},
        {5.9402,0,0,4.5001,0},
        {5.9852,0,0,4.4988,0},
        {6.0298,0,0,4.4636,0},
        {6.074,0,0,4.4136,0},
        {6.1176,0,0,4.3636,0},
        {6.1608,0,0,4.3136,0},
        {6.2034,0,0,4.2636,0},
        {6.2454,0,0,4.2136,0},
        {6.2871,0,0,4.1636,0},
        {6.3282,0,0,4.1136,0},
        {6.3689,0,0,4.0637,0},
        {6.409,0,0,4.0137,0},
        {6.4487,0,0,3.9636,0},
        {6.4878,0,0,3.9136,0},
        {6.5264,0,0,3.8636,0},
        {6.5646,0,0,3.8136,0},
        {6.6022,0,0,3.7636,0},
        {6.6393,0,0,3.7136,0},
        {6.676,0,0,3.6636,0},
        {6.7122,0,0,3.6136,0},
        {6.7478,0,0,3.5635,0},
        {6.7828,0,0,3.5136,0},
        {6.8176,0,0,3.4636,0},
        {6.8517,0,0,3.4136,0},
        {6.8853,0,0,3.3636,0},
        {6.9184,0,0,3.3136,0},
        {6.9511,0,0,3.2636,0},
        {6.9832,0,0,3.2135,0},
        {7.0149,0,0,3.1635,0},
        {7.046,0,0,3.1135,0},
        {7.0766,0,0,3.0635,0},
        {7.1067,0,0,3.0136,0},
        {7.1364,0,0,2.9636,0},
        {7.1655,0,0,2.9135,0},
        {7.1941,0,0,2.8635,0},
        {7.2223,0,0,2.8135,0},
        {7.25,0,0,2.7635,0},
        {7.277,0,0,2.7136,0},
        {7.3037,0,0,2.6636,0},
        {7.3299,0,0,2.6135,0},
        {7.3555,0,0,2.5635,0},
        {7.3807,0,0,2.5135,0},
        {7.4053,0,0,2.4635,0},
        {7.4294,0,0,2.4135,0},
        {7.4531,0,0,2.3635,0},
        {7.4761,0,0,2.3135,0},
        {7.4987,0,0,2.2636,0},
        {7.5209,0,0,2.2136,0},
        {7.5425,0,0,2.1636,0},
        {7.5637,0,0,2.1135,0},
        {7.5843,0,0,2.0635,0},
        {7.6045,0,0,2.0135,0},
        {7.6241,0,0,1.9635,0},
        {7.6433,0,0,1.9135,0},
        {7.6619,0,0,1.8634,0},
        {7.68,0,0,1.8135,0},
        {7.6977,0,0,1.7634,0},
        {7.7148,0,0,1.7134,0},
        {7.7315,0,0,1.6634,0},
        {7.7475,0,0,1.6134,0},
        {7.7632,0,0,1.5634,0},
        {7.7784,0,0,1.5133,0},
        {7.793,0,0,1.4632,0},
        {7.8072,0,0,1.4132,0},
        {7.8208,0,0,1.3632,0},
        {7.8338,0,0,1.3134,0},
        {7.8465,0,0,1.2634,0},
        {7.8587,0,0,1.2133,0},
        {7.8703,0,0,1.1633,0},
        {7.8814,0,0,1.1134,0},
        {7.8921,0,0,1.0634,0},
        {7.9022,0,0,1.0132,0},
        {7.9118,0,0,0.9632,0},
        {7.921,0,0,0.9131,0},
        {7.9296,0,0,0.8631,0},
        {7.9377,0,0,0.8135,0},
        {7.9454,0,0,0.7632,0},
        {7.9526,0,0,0.7128,0},
        {7.9592,0,0,0.6627,0},
        {7.9653,0,0,0.6129,0},
        {7.9709,0,0,0.563,0},
        {7.9761,0,0,0.5129,0},
        {7.9808,0,0,0.4625,0},
        {7.9848,0,0,0.4128,0},
        {7.9885,0,0,0.3628,0},
        {7.9915,0,0,0.3127,0},
        {7.9942,0,0,0.2633,0},
        {7.9964,0,0,0.2122,0},
        {7.9981,0,0,0.1602,0},
        {7.9992,0,0,0.1087,0},
        {7.9997,0,0,0.0602,0}
    }
;


void initialize() {}

void autonomous() {}


void opcontrol() {
	auto leftTop = Motor(18, true, AbstractMotor::gearset::blue, AbstractMotor::encoderUnits::rotations);
    auto leftMiddle = Motor(19, true, AbstractMotor::gearset::blue, AbstractMotor::encoderUnits::rotations);
    auto leftBottom = Motor(20, false, AbstractMotor::gearset::blue, AbstractMotor::encoderUnits::rotations);
    auto rightTop = Motor(11, false, AbstractMotor::gearset::blue, AbstractMotor::encoderUnits::rotations);
    auto rightMiddle = Motor(12, false, AbstractMotor::gearset::blue, AbstractMotor::encoderUnits::rotations);
    auto rightBottom = Motor(13, true, AbstractMotor::gearset::blue, AbstractMotor::encoderUnits::rotations);

    std::shared_ptr<OdomChassisController> chassis =
    ChassisControllerBuilder()
        .withMotors({leftTop, leftMiddle, leftBottom}, 
                    {rightTop, rightMiddle, rightBottom}) 
        .withDimensions({AbstractMotor::gearset::blue, 5.0/3.0}, {{3.25_in, 1.294_ft}, imev5BlueTPR})
        .withSensors(leftTop, rightTop)
        .withOdometry()
        .buildOdometry();

    auto leftTrajectory = FeedForwardController(0.187, 0.04, 0.025, 2.5, 0);
    auto rightTrajectory = FeedForwardController(0.187, 0.043, 0.02, 2.5, 0);

    auto ramsete = RamseteController();

    QLength trackWidth = 1.294_ft;

    (chassis->getOdometry())->setState({0_in, 0_in, 0_deg});
    (chassis->getModel())->resetSensors();

    for(int i = 0; i < path.size(); i++) {
        std::pair<double, double> speeds = ramsete.update(
            ((chassis->getOdometry())->getState()).x.convert(meter), // curr x
            ((chassis->getOdometry())->getState()).y.convert(meter), // curr y
            ((chassis->getOdometry())->getState()).theta.convert(radian), // curr theta
            Math::ftToMeters(path[i][0]), // desired x
            Math::ftToMeters(path[i][1]), // desired y
            path[i][2], // desired theta
            Math::ftToMeters(path[i][3]), // linear velocity
            path[i][4] // angular velocity
        );

        double leftSpeed = speeds.first - trackWidth.convert(meter) / 2 * speeds.second;
        double rightSpeed = speeds.first + trackWidth.convert(meter) / 2 * speeds.second;
        (chassis->getModel())->tank(leftSpeed, rightSpeed);

        pros::delay(10);
    }
}